// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: calc.proto

#include "calc.pb.h"
#include "calc.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace calc {

static const char* Calc_method_names[] = {
  "/calc.Calc/CalcArea",
  "/calc.Calc/CalcCircum",
  "/calc.Calc/CalcAreaSum",
  "/calc.Calc/CalcAreaStream",
};

std::unique_ptr< Calc::Stub> Calc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Calc::Stub> stub(new Calc::Stub(channel));
  return stub;
}

Calc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CalcArea_(Calc_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CalcCircum_(Calc_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CalcAreaSum_(Calc_method_names[2], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_CalcAreaStream_(Calc_method_names[3], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status Calc::Stub::CalcArea(::grpc::ClientContext* context, const ::calc::Circle& request, ::calc::Area* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CalcArea_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::calc::Area>* Calc::Stub::AsyncCalcAreaRaw(::grpc::ClientContext* context, const ::calc::Circle& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::calc::Area>(channel_.get(), cq, rpcmethod_CalcArea_, context, request);
}

::grpc::Status Calc::Stub::CalcCircum(::grpc::ClientContext* context, const ::calc::Circle& request, ::calc::Circum* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CalcCircum_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::calc::Circum>* Calc::Stub::AsyncCalcCircumRaw(::grpc::ClientContext* context, const ::calc::Circle& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::calc::Circum>(channel_.get(), cq, rpcmethod_CalcCircum_, context, request);
}

::grpc::ClientWriter< ::calc::Circle>* Calc::Stub::CalcAreaSumRaw(::grpc::ClientContext* context, ::calc::Area* response) {
  return new ::grpc::ClientWriter< ::calc::Circle>(channel_.get(), rpcmethod_CalcAreaSum_, context, response);
}

::grpc::ClientAsyncWriter< ::calc::Circle>* Calc::Stub::AsyncCalcAreaSumRaw(::grpc::ClientContext* context, ::calc::Area* response, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncWriter< ::calc::Circle>(channel_.get(), cq, rpcmethod_CalcAreaSum_, context, response, tag);
}

::grpc::ClientReaderWriter< ::calc::Circle, ::calc::Area>* Calc::Stub::CalcAreaStreamRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::calc::Circle, ::calc::Area>(channel_.get(), rpcmethod_CalcAreaStream_, context);
}

::grpc::ClientAsyncReaderWriter< ::calc::Circle, ::calc::Area>* Calc::Stub::AsyncCalcAreaStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::calc::Circle, ::calc::Area>(channel_.get(), cq, rpcmethod_CalcAreaStream_, context, tag);
}

Calc::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      Calc_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Calc::Service, ::calc::Circle, ::calc::Area>(
          std::mem_fn(&Calc::Service::CalcArea), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Calc_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Calc::Service, ::calc::Circle, ::calc::Circum>(
          std::mem_fn(&Calc::Service::CalcCircum), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Calc_method_names[2],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< Calc::Service, ::calc::Circle, ::calc::Area>(
          std::mem_fn(&Calc::Service::CalcAreaSum), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Calc_method_names[3],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< Calc::Service, ::calc::Circle, ::calc::Area>(
          std::mem_fn(&Calc::Service::CalcAreaStream), this)));
}

Calc::Service::~Service() {
}

::grpc::Status Calc::Service::CalcArea(::grpc::ServerContext* context, const ::calc::Circle* request, ::calc::Area* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Calc::Service::CalcCircum(::grpc::ServerContext* context, const ::calc::Circle* request, ::calc::Circum* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Calc::Service::CalcAreaSum(::grpc::ServerContext* context, ::grpc::ServerReader< ::calc::Circle>* reader, ::calc::Area* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Calc::Service::CalcAreaStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::calc::Area, ::calc::Circle>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace calc

